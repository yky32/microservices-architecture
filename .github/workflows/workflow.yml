# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: SpringBoot CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  K8S_CLUSTER_ID: ${{ secrets.DIGITALOCEAN_K8S_CLUSTER_ID }}
  K8S_YAML_PATH: ./.k8s

jobs:
#  publish-pkg:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - name: Set up JDK 11 for Shared Runner
#        uses: actions/setup-java@v3
#        with:
#          java-version: '11'
#          distribution: 'temurin'
#          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
#          settings-path: ${{ github.workspace }} # location for the settings.xml file
#
#      - name: Build with Maven
#        run: mvn -B package --file app-core/pom.xml
#
#      - name: Publish to GitHub Packages Apache Maven
#        run: mvn deploy -s $GITHUB_WORKSPACE/settings.xml --file app-core/pom.xml
#        env:
#          GITHUB_TOKEN: ${{ secrets.MAVEN_GITHUB_TOKEN }}

  build:
#    needs: publish-pkg
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: List of the GitHub Actions environment variables on ubuntu-latest
        run: env

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Building and Pushing [user-service]
        run: mvn package dockerfile:push --file user-service/pom.xml
        env:
          MAVEN_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Building and Pushing [profile-service]
        run: mvn package dockerfile:push --file profile-service/pom.xml
        env:
          MAVEN_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Building and Pushing [service-registry]
        run: mvn package dockerfile:push --file service-registry/pom.xml
        env:
          MAVEN_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Building and Pushing [api-gateway]
        run: mvn package dockerfile:push --file api-gateway/pom.xml
        env:
          MAVEN_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Building and Pushing [cloud-config-server]
        run: mvn package dockerfile:push --file cloud-config-server/pom.xml
        env:
          MAVEN_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Curl for Finish Build
        run: |
          curl --request POST \
          --header 'content-type: application/json' \
          --url https://discord.com/api/webhooks/851179044178231336/X6hEMqgRwfKGhig8VRQe4soGoii_Tu2cjxTCm--kfPxt8svswCUPjwhIq4pVh_Y9Npy7 \
          --data '{
            "username": "${{ github.repository }}-build-bot", 
            "content":  "${{ github.event.repository.pushed_at }}"
          }'

#  deploy:
#    needs: build
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@master
#
#      - name: Install doctl
#        uses: digitalocean/action-doctl@v2
#        with:
#          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
#
#      - name: Save DigitalOcean kubeconfig
#        run: doctl kubernetes cluster kubeconfig save "$K8S_CLUSTER_ID"
#
#      - name: Kubernetes apply -f ./.k8s
#        run: kubectl apply -f "$K8S_YAML_PATH"
#
#      - name: Kubernetes rollout the latest image
#        run: kubectl rollout restart deploy
#
#      - name: Curl for Finish Deploy
#        run: |
#          curl --request POST \
#          --header 'content-type: application/json' \
#          --url https://discord.com/api/webhooks/851179044178231336/X6hEMqgRwfKGhig8VRQe4soGoii_Tu2cjxTCm--kfPxt8svswCUPjwhIq4pVh_Y9Npy7 \
#          --data '{
#            "username": "${{ github.repository }}-deploy-bot",
#            "content":  "${{ github.event.repository.pushed_at }}"
#          }'